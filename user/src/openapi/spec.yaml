openapi: 3.0.0
info:
  title: User Service API
  version: 1.0.0
  description: User management and authentication service for Clash Of Pok√©chakucha

servers:
  - url: http://localhost:3000
    description: Development server

components:
  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        username:
          type: string
          minLength: 3
          maxLength: 30
        email:
          type: string
          format: email
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time
        credits:
          type: number
          default: 0

    UserCreate:
      type: object
      required:
        - username
        - email
        - password
      properties:
        username:
          type: string
          minLength: 3
          maxLength: 30
        email:
          type: string
          format: email
        password:
          type: string
          minLength: 8

    LoginCredentials:
      type: object
      required:
        - email
        - password
      properties:
        email:
          type: string
          format: email
        password:
          type: string

    AuthResponse:
      type: object
      properties:
        token:
          type: string
        user:
          $ref: "#/components/schemas/User"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /users/register:
    post:
      summary: Register a new user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserCreate"
      responses:
        201:
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        400:
          description: Invalid input
        409:
          description: Username or email already exists

  /users/login:
    post:
      summary: Authenticate user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginCredentials"
      responses:
        200:
          description: Authentication successful
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        401:
          description: Invalid credentials

  /users/me:
    get:
      summary: Get current user profile
      tags:
        - User
      security:
        - bearerAuth: []
      responses:
        200:
          description: User profile retrieved successfully
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        401:
          description: Unauthorized

  /users/verify:
    get:
      summary: Verify JWT token
      tags:
        - Service
      security:
        - bearerAuth: []
      responses:
        200:
          description: Token verification result
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  isValid:
                    type: boolean
        401:
          description: Invalid token

  /users/details/{userId}:
    get:
      summary: Get user details for service integration
      tags:
        - Service
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: ID of the user to get details for
      responses:
        200:
          description: User details
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                  username:
                    type: string
                  credits:
                    type: number
                  level:
                    type: number
        401:
          description: Unauthorized
        404:
          description: User not found

  /users:
    get:
      summary: Get all users
      tags:
        - User
      security:
        - bearerAuth: []
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            minimum: 1
            default: 1
          description: Page number
        - in: query
          name: limit
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 10
          description: Number of users per page
        - in: query
          name: username
          schema:
            type: string
          description: Filter by username (partial match)
        - in: query
          name: levelMin
          schema:
            type: integer
            minimum: 1
          description: Filter by minimum level
        - in: query
          name: levelMax
          schema:
            type: integer
            minimum: 1
          description: Filter by maximum level
      responses:
        200:
          description: List of users with pagination
          content:
            application/json:
              schema:
                type: object
                properties:
                  users:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                        username:
                          type: string
                        email:
                          type: string
                        credits:
                          type: number
                        level:
                          type: number
                        experience:
                          type: number
                        createdAt:
                          type: string
                          format: date-time
                  pagination:
                    type: object
                    properties:
                      total:
                        type: number
                      page:
                        type: number
                      limit:
                        type: number
                      pages:
                        type: number
        401:
          description: Unauthorized
